#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'

require File.join(File.dirname(__FILE__), '../lib/anygit')

module Anygit
  class FetchPackfile
    TMPDIR_BASE = File.join(File.dirname(__FILE__), '../tmp')

    def initialize(repo, opts)
      @repo = repo
      @opts = opts

      @tmpdir = File.join(TMPDIR_BASE, "#{repo.id}-#{Time.now.to_i}-#{rand}")

      Anygit.log.info("Initing useless repo at #{@tmpdir}")
      @git_repo = Rugged::Repository.init_at(@tmpdir, true)
    end

    def run
      path = fetch
      # For some reason, my code requires the index to be built. I
      # suspect there's something with the mwindow stuff I removed,
      # but haven't had time to poke yet.
      sha1 = index(path)
      new_path = fixup_pack_name(path, sha1)
      cleanup unless @opts[:dont_delete]
      new_path
    end

    def fetch
      Anygit.log.info("Fetching all refs from #{@repo.url}")
      r = Rugged::Remote.new(@git_repo, @repo.url)
      r.connect(:fetch)
      r.download
    end

    def index(path)
      Anygit.log.info("Building index for #{path}. This could take a while.")
      Rugged::Index.index_pack(path)
    end

    def fixup_pack_name(path, sha1)
      new_path = File.join(File.dirname(path), "pack-#{sha1}.pack")
      FileUtils.mv(path, new_path)
      Anygit.log.info("Moving #{path} -> #{new_path}")
      new_path
    end

    def cleanup
      Anygit.log.info("Nuking #{@tmpdir}")
      FileUtils.rm_r(@tmpdir)
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options] <url>"

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-c', '--create-repo', 'Create repo by url if it does not exist') do
      options[:create_repo] = true
    end

    opts.on('-d', '--dont-delete', 'Leave generated files lying around') do
      options[:dont_delete] = true
    end
  end
  optparse.parse!

  if ARGV.length != 1
    puts optparse
    return 1
  end

  url = ARGV[0]

  Anygit::Model.init

  if options[:create_repo]
    repo = Anygit::Model::Repo.first_or_create(:url => url)
  else
    repo = Anygit::Model::Repo.first(:url => url)
    raise "No repo found" unless repo
  end
  runner = Anygit::FetchPackfile.new(repo, :dont_delete => options[:dont_delete])
  runner.run
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
